auth - Authentication with login and password
content-negotiation - HTTP content negotiation
cookie-sessions - Working with cookie-based sessions
cookies - Working with cookies
downloads - Transferring files to client
ejs - Working with Embedded JavaScript templating (ejs)
error-pages - Creating error pages
error - Working with error middleware
hello-world - Simple request handler
markdown - Markdown as template engine
multi-router - Working with multiple Express routers
multipart - Accepting multipart-encoded forms
mvc - MVC-style controllers
online - Tracking online user activity with online and redis packages
params - Working with route parameters
resource - Multiple HTTP operations on the same resource
route-map - Organizing routes using a map
route-middleware - Working with route middleware
route-separation - Organizing routes per each resource
search - Search API
session - User sessions
static-files - Serving static files
vhost - Working with virtual hosts
view-constructor - Rendering views dynamically
view-locals - Saving data in request object between middleware calls
web-service - Simple API service

===========================================================================
//Basic Routing//
Respond with Hello World! on the homepage:

app.get('/', (req, res) => {
  res.send('Hello World!')
})
Respond to POST request on the root route (/), the applicationâ€™s home page:

app.post('/', (req, res) => {
  res.send('Got a POST request')
})
Respond to a PUT request to the /user route:

app.put('/user', (req, res) => {
  res.send('Got a PUT request at /user')
})
Respond to a DELETE request to the /user route:

app.delete('/user', (req, res) => {
  res.send('Got a DELETE request at /user')
})